{
	/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"New default class": {
		"prefix": "edc",
		"body": [
			"export default class ${1:ClassName} {",
			"\t$2",
			"}"
		]
	},
	"New default interface": {
		"prefix": "edi",
		"body": [
			"export default interface ${1:InterfaceName} {",
			"\t$2",
			"}"
		]
	},
	"New interface": {
		"prefix": "ei",
		"body": [
			"export interface ${1:InterfaceName} {",
			"\t$2",
			"}"
		]
	},
	"TSRPC Protocol": {
		"prefix": "tptl",
		"body": [
			"import TsRpcPtl from \"tsrpc-protocol\";\n",
			"const Ptl${1:PtlName} = new TsRpcPtl<Req${1:PtlName},Res${1:PtlName}>(__filename);",
			"export default Ptl${1:PtlName};",
			"",
			"export interface Req${1:PtlName} {",
			"\t$2",
			"}",
			"",
			"export interface Res${1:PtlName} {",
			"\t$3",
			"}"
		]
	},
	"TSRPC API": {
		"prefix": "tapi",
		"body": [
			"import { ApiRequest, ApiResponse } from \"tsrpc\";\n",
			"export default async function Api${1:PtlName}(req: ApiRequest<Req${1:PtlName}$2>, res: ApiResponse<Res${1:PtlName}$3>) {",
			"\t$4",
			"}"
		]
	},
	"New Test Case": {
		"prefix": "testCase",
		"body": [
			"import * as assert from 'assert';",
			"",
			"describe('${1:ClassName}', function () {",
			"\tit('${2:FunctionName}', function () {",
			"\t\t$3",
			"\t})",
			"})"
		]
	},
	"Import as": {
		"prefix": "ias",
		"body": "import * as $1 from \"$1\";"
	},
	"for 0->length": {
		"prefix": "f0",
		"body": [
			"for (let i = 0; i < ${1:arr.length}; ++i){",
			"\t$2",
			"}"
		]
	},
	"for length->0": {
		"prefix": "f-1",
		"body": [
			"for (let i = ${1:arr.length}; i > -1; --i){",
			"\t$2",
			"}"
		]
	},
	"Create Array Quickly": {
		"prefix": "af",
		"body": "Array.from({ length: ${1:100} }, (v, i) => ${2:i})"
	},
	"Async function": {
		"prefix": "asf",
		"body": "async function () {\n\t$1\n}$2"
	},
	"Cocos Property": {
		"prefix": "ccp",
		"body": [
			"@property(${2:cc.Node})",
			"${1:VarName}: ${2:cc.Node} = ${3:null as any};"
		]
	},
	"Region": {
		"prefix": "#reg",
		"body": [
			"// #region ${1:RegionName}",
			"$2",
			"// #endregion"
		]
	},
	"Cocos Component": {
		"prefix": "ccc",
		"body": [
			"const {ccclass, property} = cc._decorator;",
			"\n@ccclass",
			"export default class ${1:CompName} extends cc.Component {",
			"\t$2",
			"}"
		]
	},
	"Cocos getChildByName": {
		"prefix": "gc",
		"body": "getChildByName('$1')$2"
	},
	"Cocos getComponent": {
		"prefix": "gp",
		"body": "getComponent($1)$2"
	}
}